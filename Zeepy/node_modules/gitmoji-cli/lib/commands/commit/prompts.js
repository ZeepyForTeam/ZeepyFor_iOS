"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _inquirer = _interopRequireDefault(require("inquirer"));

var _configurationVault = _interopRequireDefault(require("../../utils/configurationVault"));

var _filterGitmojis = _interopRequireDefault(require("../../utils/filterGitmojis"));

var _getDefaultCommitContent = _interopRequireDefault(require("../../utils/getDefaultCommitContent"));

var _guard = _interopRequireDefault(require("./guard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TITLE_MAX_LENGTH_COUNT = 48;

_inquirer.default.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

var _default = (gitmojis, mode) => {
  const {
    title,
    message
  } = (0, _getDefaultCommitContent.default)(mode);
  return [{
    name: 'gitmoji',
    message: 'Choose a gitmoji:',
    type: 'autocomplete',
    source: (answersSoFor, input) => {
      return Promise.resolve((0, _filterGitmojis.default)(input, gitmojis).map(gitmoji => ({
        name: `${gitmoji.emoji}  - ${gitmoji.description}`,
        value: gitmoji[_configurationVault.default.getEmojiFormat()]
      })));
    }
  }, ...(_configurationVault.default.getScopePrompt() ? [{
    name: 'scope',
    message: 'Enter the scope of current changes:',
    validate: _guard.default.scope
  }] : []), {
    name: 'title',
    message: 'Enter the commit title',
    validate: _guard.default.title,
    transformer: input => {
      return `[${(title || input).length}/${TITLE_MAX_LENGTH_COUNT}]: ${input}`;
    },
    ...(title ? {
      default: title
    } : {})
  }, {
    name: 'message',
    message: 'Enter the commit message:',
    validate: _guard.default.message,
    ...(message ? {
      default: message
    } : {})
  }];
};

exports.default = _default;