"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _inquirer = _interopRequireDefault(require("inquirer"));

var _getEmojis = _interopRequireDefault(require("../../utils/getEmojis"));

var _prompts = _interopRequireDefault(require("./prompts"));

var _withHook = _interopRequireWildcard(require("./withHook"));

var _withClient = _interopRequireDefault(require("./withClient"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const commit = mode => {
  if (mode === 'hook') {
    (0, _withHook.registerHookInterruptionHandler)();
    return (0, _withHook.cancelIfNeeded)().then(() => promptAndCommit(mode));
  }

  return promptAndCommit(mode);
};

const promptAndCommit = mode => (0, _getEmojis.default)().then(gitmojis => (0, _prompts.default)(gitmojis, mode)).then(questions => {
  _inquirer.default.prompt(questions).then(answers => {
    if (mode === 'hook') return (0, _withHook.default)(answers);
    return (0, _withClient.default)(answers);
  });
});

var _default = commit;
exports.default = _default;